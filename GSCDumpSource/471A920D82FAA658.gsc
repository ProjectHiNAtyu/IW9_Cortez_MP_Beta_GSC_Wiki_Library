// IW9 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_36AE2D2C117CDB23( _id_CC4F2E0388379546 )
{
    switch ( _id_CC4F2E0388379546 )
    {
        case "onUserInit":
            return ::_id_3DBD361F74B442F9;
        case "onUserTerminate":
            return ::_id_A157FBBC31D9EB1A;
        case "CalcStartOrigin":
            return ::_id_18ADD0932F52EE9E;
        case "CanSupport":
            return ::_id_E62B12681729B218;
        case "ArrivalSetup":
            return ::_id_217DFEB1C92A9A53;
        case "SetDualEntry":
            return ::_id_AF686E8A0657CE57;
        case "SetDoorSlotsFull":
            return ::_id_4E1B2BA03410FA55;
        case "OnArrival":
            return ::_id_EC9DC4B6415CD3B9;
        case "OnEnter":
            return ::onenter;
    }
}

_id_3DBD361F74B442F9( _id_F8D4ED108521E632 )
{
    if ( !isdefined( _func_060D6151AF81A343( _id_F8D4ED108521E632, "breachtype" ) ) )
    {
        types = [ "breach", "kick", "flashbang" ];
        type = scripts\engine\utility::random( types );
        _func_AE368FAD1A1DC337( _id_F8D4ED108521E632, "breachtype", type );
    }

    if ( isdefined( self.node ) )
        self setbtgoalnode( 0, self.node );
}

_id_A157FBBC31D9EB1A( _id_F8D4ED108521E632 )
{
    self clearbtgoal( 0 );
    self._id_B4C85F2BC7ABB407 = undefined;
    self._id_DDAD29BBDECD1671 = undefined;

    if ( self._id_A942DD31D55102C9 != self.asmname )
        _id_010B6724C15A95E8::_id_B6AF4ADE50626E90();
}

_id_18ADD0932F52EE9E( statename, role )
{
    id = self _meth_92435C7A6AE85C3C();
    origin = _func_BBFC94714C82788B( id );
    angles = _func_785F60047ABCFA05( id );
    _id_DAD5E6255A5BF2AC = anglestoforward( angles );
    _id_5C6AFC1001475042 = origin - self.origin;
    _id_775361D05A790917 = vectorcross( _id_5C6AFC1001475042, _id_DAD5E6255A5BF2AC );
    _id_2480E63EC7F4DE84 = 1;

    if ( _id_775361D05A790917[2] < 0 )
        _id_2480E63EC7F4DE84 = 0;

    idlestate = "door_idle";

    if ( _id_2480E63EC7F4DE84 )
        _id_9178C0EEF9E08EB1 = "left";
    else
        _id_9178C0EEF9E08EB1 = "right";

    _id_28D48E48018C61BA = _func_060D6151AF81A343( id, "door_knob" );

    if ( isdefined( _id_28D48E48018C61BA ) )
        _id_BF75BC0C2B81513F = _id_28D48E48018C61BA != _id_9178C0EEF9E08EB1;
    else
        _id_BF75BC0C2B81513F = 0;

    type = _func_060D6151AF81A343( id, "breachtype" );
    _id_975BE27F963E2F30 = type;
    _id_996949B7474560EB = _func_A0CCCF0B4C466B2C( self, _id_975BE27F963E2F30 );
    animset = _id_996949B7474560EB.animation;
    _id_2C8936D08F85C5C1 = archetypegetrandomalias( animset, idlestate, _id_9178C0EEF9E08EB1, 0 );
    xanim = animsetgetanimfromindex( animset, idlestate, _id_2C8936D08F85C5C1 );
    _id_78FF943CA85E1279 = getstartorigin( origin, angles, xanim );
    _id_D78735C0A8459B07 = getstartangles( origin, angles, xanim );
    self._id_A57082FDF62BC898 = "door_arrival";
    self._id_33B4C07D1F388776 = animset;
    self._id_0A41EDF45BB0FF97 = _id_D78735C0A8459B07;
    self._id_171120E99DF3E286 = 1;
    self._id_A2A6C6C46DEFE8C4 = 1;
    self._id_B4C85F2BC7ABB407 = spawnstruct();
    self._id_B4C85F2BC7ABB407.asmname = _id_996949B7474560EB._id_3E38EE41DC326FDC;
    self._id_B4C85F2BC7ABB407._id_AE3EA15396B65C1F = animset;
    self._id_B4C85F2BC7ABB407._id_D6CF89A3E47ADA1F = _id_9178C0EEF9E08EB1;
    self._id_B4C85F2BC7ABB407.angles = _id_D78735C0A8459B07;
    self._id_B4C85F2BC7ABB407._id_2B1676BAB1BA8985 = "solo";
    self._id_B4C85F2BC7ABB407.role = role;
    self._id_B4C85F2BC7ABB407._id_BF75BC0C2B81513F = 0;

    if ( role == "active" )
        self._id_B4C85F2BC7ABB407._id_BF75BC0C2B81513F = _id_BF75BC0C2B81513F;

    if ( role == "support" )
    {
        self._id_B4C85F2BC7ABB407._id_2B1676BAB1BA8985 = "dual";

        if ( _id_BF75BC0C2B81513F )
        {
            if ( _id_2480E63EC7F4DE84 )
                self._id_B4C85F2BC7ABB407._id_D6CF89A3E47ADA1F = "right";
            else
                self._id_B4C85F2BC7ABB407._id_D6CF89A3E47ADA1F = "left";
        }
    }

    self._id_DDAD29BBDECD1671 = ::_id_DDAD29BBDECD1671;
    return _id_78FF943CA85E1279;
}

_id_DDAD29BBDECD1671()
{
    self._id_B4C85F2BC7ABB407._id_74C9B1F78857273D = 1;
    _id_010B6724C15A95E8::_id_C434AF0895CC147C( self._id_B4C85F2BC7ABB407.asmname, self._id_B4C85F2BC7ABB407._id_AE3EA15396B65C1F );
}

_id_217DFEB1C92A9A53( statename, params )
{

}

_id_6D35024A1F783A16( statename, params )
{
    self._id_A57082FDF62BC898 = undefined;
    self._id_33B4C07D1F388776 = undefined;
    self._id_0A41EDF45BB0FF97 = undefined;
    self._id_171120E99DF3E286 = 0;
    self._id_A2A6C6C46DEFE8C4 = 0;
}

_id_D104EA3FD0D1BE21( _id_F8D4ED108521E632, _id_D293838FE8A43473 )
{
    _id_7449DF250ED378C2 = _func_060D6151AF81A343( _id_F8D4ED108521E632, "door" );

    if ( isdefined( _id_7449DF250ED378C2 ) && _id_7449DF250ED378C2 scriptabledoorisclosed() )
        _id_7449DF250ED378C2 scriptabledooropen( "away", self.origin );
}

_id_EC9DC4B6415CD3B9( statename, params )
{
    if ( !istrue( self._id_B4C85F2BC7ABB407._id_74C9B1F78857273D ) )
        _id_010B6724C15A95E8::_id_C434AF0895CC147C( self._id_B4C85F2BC7ABB407.asmname, self._id_B4C85F2BC7ABB407._id_AE3EA15396B65C1F );

    id = self _meth_92435C7A6AE85C3C();
    _id_8CBC802E0992BE6F = self._id_B4C85F2BC7ABB407._id_D6CF89A3E47ADA1F;
    _id_38B98BFA4426BCF9 = self._id_B4C85F2BC7ABB407._id_2B1676BAB1BA8985;
    _id_4148B1F68BF5D60A = undefined;

    if ( _id_38B98BFA4426BCF9 == "dual" )
        _id_4148B1F68BF5D60A = scripts\engine\utility::ter_op( self._id_B4C85F2BC7ABB407._id_D6CF89A3E47ADA1F == _func_060D6151AF81A343( id, "door_knob" ), "_active", "_support" );

    self._id_B4C85F2BC7ABB407._id_C58C71EBC71F7728 = _id_8CBC802E0992BE6F + "_" + _id_38B98BFA4426BCF9;

    if ( isdefined( _id_4148B1F68BF5D60A ) )
        self._id_B4C85F2BC7ABB407._id_C58C71EBC71F7728 = self._id_B4C85F2BC7ABB407._id_C58C71EBC71F7728 + _id_4148B1F68BF5D60A;

    self _meth_FB02BE5D663ECA13();
    _id_F8D4ED108521E632 = self _meth_92435C7A6AE85C3C();

    if ( _func_060D6151AF81A343( _id_F8D4ED108521E632, "path_has_door" ) )
        _id_D104EA3FD0D1BE21( _id_F8D4ED108521E632, self.origin );
}

onenter( statename, params )
{
    self endon( "death" );
    self._id_B4C85F2BC7ABB407._id_3F651B778E93656E = 1;
    endtime = gettime() + 5000;
    waitframe();

    while ( gettime() < endtime )
    {
        if ( self asmeventfired( self.asmname, "end" ) )
            break;

        waitframe();
    }
}

_id_27DC505064BCF45B( asmname, statename, _id_F2B19B25D457C2A6, params )
{
    return istrue( self._id_B4C85F2BC7ABB407._id_74C9B1F78857273D );
}

_id_57787698E416086F( asmname, statename, _id_F2B19B25D457C2A6, params )
{
    return istrue( self._id_B4C85F2BC7ABB407._id_3F651B778E93656E );
}

_id_14242F7E3E92261C( asmname, statename, params )
{
    alias = self._id_B4C85F2BC7ABB407._id_D6CF89A3E47ADA1F;
    return scripts\asm\asm::asm_lookupanimfromalias( statename, alias );
}

_id_0CFA7813E89867C4( asmname, statename, params )
{
    alias = self._id_B4C85F2BC7ABB407._id_D6CF89A3E47ADA1F + "_" + self._id_B4C85F2BC7ABB407._id_2B1676BAB1BA8985 + "_" + self._id_B4C85F2BC7ABB407.role;
    return scripts\asm\asm::asm_lookupanimfromalias( statename, alias );
}

_id_A3564484875DA8F8( asmname, statename, params )
{
    thread scripts\asm\asm::_id_FB56C9527636713F( asmname, statename, 1 );
    self orientmode( "face angle", self._id_B4C85F2BC7ABB407.angles[1] );
}

_id_CD9DC5DBA70886E7( asmname, statename, _id_F2B19B25D457C2A6, params )
{
    id = self _meth_92435C7A6AE85C3C();
    _id_200CB8C6E6E2E56B = _func_060D6151AF81A343( id, "doorslotsfull" );

    if ( _id_200CB8C6E6E2E56B )
        return 0;

    _id_E52D118B0BFBE7CA = _func_060D6151AF81A343( id, "path_has_door" );

    if ( !_id_E52D118B0BFBE7CA )
        return 0;

    if ( !isdefined( self._id_B4C85F2BC7ABB407._id_BF75BC0C2B81513F ) || isdefined( self._id_B4C85F2BC7ABB407._id_BF75BC0C2B81513F ) && !self._id_B4C85F2BC7ABB407._id_BF75BC0C2B81513F )
        return 0;

    return 1;
}

_id_5D9605CC307A2DC3( asmname, statename, params )
{
    if ( self._id_B4C85F2BC7ABB407._id_D6CF89A3E47ADA1F == "left" )
        alias = "left_to_right";
    else
        alias = "right_to_left";

    return scripts\asm\asm::asm_lookupanimfromalias( statename, alias );
}

_id_CE873FDCC8883002( asmname, statename, params )
{
    if ( self._id_B4C85F2BC7ABB407._id_D6CF89A3E47ADA1F == "left" )
        self._id_B4C85F2BC7ABB407._id_D6CF89A3E47ADA1F = "right";
    else
        self._id_B4C85F2BC7ABB407._id_D6CF89A3E47ADA1F = "left";
}

_id_E62B12681729B218( asmname, statename, _id_F2B19B25D457C2A6, params )
{
    id = self _meth_92435C7A6AE85C3C();
    origin = _func_BBFC94714C82788B( id );
    angles = _func_785F60047ABCFA05( id );
    _id_DAD5E6255A5BF2AC = anglestoforward( angles );
    _id_5C6AFC1001475042 = origin - self.origin;
    _id_775361D05A790917 = vectorcross( _id_5C6AFC1001475042, _id_DAD5E6255A5BF2AC );
    _id_2480E63EC7F4DE84 = 1;

    if ( _id_775361D05A790917[2] < 0 )
        _id_2480E63EC7F4DE84 = 0;

    if ( _id_2480E63EC7F4DE84 )
        _id_9B185A7815A646B2 = "left";
    else
        _id_9B185A7815A646B2 = "right";

    _id_BB3BFBC5F90B8E98 = _func_060D6151AF81A343( id, "door_knob" );
    _id_67DDFCEF5F2744B4 = _id_9B185A7815A646B2 == _id_BB3BFBC5F90B8E98;
    dooropen = abs( _func_060D6151AF81A343( id, "openness" ) ) >= 45;

    if ( _id_67DDFCEF5F2744B4 && dooropen )
        return 0;

    return 1;
}

_id_AF686E8A0657CE57()
{
    self._id_B4C85F2BC7ABB407._id_2B1676BAB1BA8985 = "dual";
}

_id_4E1B2BA03410FA55()
{
    id = self _meth_92435C7A6AE85C3C();
    _func_AE368FAD1A1DC337( id, "doorslotsfull", 1 );
}
